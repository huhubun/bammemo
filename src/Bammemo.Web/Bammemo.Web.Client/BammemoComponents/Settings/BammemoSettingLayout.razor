@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

<BammemoPageTitle Title="@($"设置 - {PageTitle}")" />

<div class="bammemo-setting-layout-wrap">
    <BammemoCard>
        <FluentGrid OnBreakpointEnter="@OnBreakpointEnterHandler">
            <FluentGridItem xs="12">
                <FluentStack Class="bammemo-setting-layout-stack" Orientation="@pageStyle.ContentOrientation" HorizontalGap="@(16*2)" VerticalGap="16">
                    <FluentNavMenu Class="bammemo-setting-nav-menu" Style="@pageStyle.NavWidth">
                        <FluentNavLink Icon="@(new Icons.Regular.Size20.WindowColumnOneFourthLeft())" Href="@SiteSettingUrl" Match="NavLinkMatch.All">站点</FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size20.LinkMultiple())" Href="/settings/links" Match="NavLinkMatch.All">链接</FluentNavLink>
                        <FluentNavLink Icon="@(new Icons.Regular.Size20.Info())" Href="/settings/about" Match="NavLinkMatch.All">关于页</FluentNavLink> 
                        <FluentNavLink Icon="@(new Icons.Regular.Size20.DocumentOnePageLink())" Href="/settings/redirects" Match="NavLinkMatch.All">重定向</FluentNavLink>
                    </FluentNavMenu>
                    <div class="bammemo-setting-content-wrap">
                        @ChildContent
                    </div>
                </FluentStack>
            </FluentGridItem>
        </FluentGrid>
    </BammemoCard>
</div>

@code {
    private const string SETTING_INDEX_URL = "/settings";
    private const string SITE_SETTING_URL = "/settings/site";
    private static readonly GridItemSize[] smallSizes = [GridItemSize.Xs, GridItemSize.Sm];
    private static readonly PageStyle smallSizeStyle = new()
        {
            ContentOrientation = Orientation.Vertical,
            NavWidthValue = "100%"
        };
    private static readonly PageStyle normalSizeStyle = new()
        {
            ContentOrientation = Orientation.Horizontal,
                NavWidthValue = "150px"
        };
    private PageStyle pageStyle = normalSizeStyle;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public required string PageTitle { get; set; }

    private string SiteSettingUrl
    {
        get
        {
            var path = new Uri(NavigationManager.Uri).AbsolutePath;

            if (SETTING_INDEX_URL == path)
            {
                return SETTING_INDEX_URL;
            }

            return SITE_SETTING_URL;
        }
    }

    void OnBreakpointEnterHandler(GridItemSize size)
    {
        if (smallSizes.Contains(size))
        {
            pageStyle = smallSizeStyle;
        }
        else
        {
            pageStyle = normalSizeStyle;
        }
    }

    record PageStyle
    {
        public Orientation ContentOrientation { get; set; }
        public string? NavWidthValue { get; set; }

        public string NavWidth => $"width: {NavWidthValue ?? "100%"}";
    }
}
