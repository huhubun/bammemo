@rendermode InteractiveWebAssembly
@using System.Net
@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<BammemoSettingSiteLinkEditDialog.SiteLinkModel>
@inject Bammemo.Web.Client.WebApis.Client.WebApiClient WebApiClient
@inject IMapper Mapper
@inject IToastService ToastService

<FluentDialogBody>
    <EditForm EditContext="@_editContext" FormName="simple_redirect_rule">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical">
            <div class="w-full">
                <FluentTextField @bind-Value="@Content.Name" Label="Name" Required Class="w-full" />
                <FluentValidationMessage For="@(() => Content.Name)" />
            </div>

            <div class="w-full">
                <FluentTextField @bind-Value="@Content.Url" Label="Url" Required Class="w-full" />
                <FluentValidationMessage For="@(() => Content.Url)" />
            </div>
        </FluentStack>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
    Loading="@isLoading"
    OnClick="@SaveAsync">
        Save
    </FluentButton>

    <FluentButton Appearance="Appearance.Neutral"
    OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

<FluentToastProvider />

@code {
    private EditContext _editContext = default!;
    private bool isLoading = false;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public BammemoSettingSiteLinkEditDialog.SiteLinkModel Content { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            isLoading = true;

            try
            {
                if (Content.Id.HasValue)
                {
                    await WebApiClient.Api.SiteLinks[Content.Id.Value].PutAsync(Mapper.Map<Bammemo.Web.Client.WebApis.Client.Models.UpdateSiteLinkRequest>(Content));
                }
                else
                {
                    await WebApiClient.Api.SiteLinks.PostAsync(Mapper.Map<Bammemo.Web.Client.WebApis.Client.Models.CreateSiteLinkRequest>(Content));
                }

                await Dialog.CloseAsync(Content);
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"操作失败：{ex.Message}");
                Console.WriteLine($"Site link 操作失败：{ex}");
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    public record SiteLinkModel
    {
        public int? Id { get; set; }

        [Required]
        public string? Name { get; set; }

        [Required]
        [CustomValidation(typeof(SiteLinkModelValidator), nameof(SiteLinkModelValidator.IsValidUrl))]
        public string? Url { get; set; }
    }

    public class SiteLinkModelValidator
    {
        public static ValidationResult IsValidUrl(string? value, ValidationContext context)
            => Uri.TryCreate(value, UriKind.Absolute, out _) ? ValidationResult.Success : new ValidationResult("Url 格式错误");
    }
}
