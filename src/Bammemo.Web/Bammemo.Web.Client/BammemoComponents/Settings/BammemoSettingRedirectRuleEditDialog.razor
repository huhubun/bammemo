@rendermode InteractiveWebAssembly
@using System.Net
@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<BammemoSettingRedirectRuleEditDialog.RedirectRuleModel>
@inject Bammemo.Web.Client.WebApis.Client.WebApiClient WebApiClient
@inject IMapper Mapper
@inject IToastService ToastService

<FluentDialogBody>
    <EditForm EditContext="@_editContext" FormName="simple_redirect_rule">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical">
            <div class="w-full">
                <FluentTextField @bind-Value="@Content.Source" Label="Source" Required Class="w-full" />
                <FluentValidationMessage For="@(() => Content.Source)" />
            </div>

            <div class="w-full">
                <FluentSelect TOption="KeyValuePair<int, string>"
                              Items="RedirectRuleHelper.GetValidHttpStatus()"
                              OptionText="@(i=> $"{i.Value}")"
                              OptionValue="@(i=>i.Key.ToString())"
                              @bind-Value="@Content.HttpStatus"
                              Label="Http Status" />
                <FluentValidationMessage For="@(() => Content.HttpStatus)" />
            </div>

            <div class="w-full">
                <FluentTextField @bind-Value="@Content.Target" Label="Target" Required Class="w-full" />
                <FluentValidationMessage For="@(() => Content.Target)" />
            </div>
        </FluentStack>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Loading="@isLoading"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>

    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

<FluentToastProvider />

@code {
    private EditContext _editContext = default!;
    private bool isLoading = false;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public BammemoSettingRedirectRuleEditDialog.RedirectRuleModel Content { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (Content.HttpStatus == null)
        {
            Content.HttpStatus = RedirectRuleHelper.GetValidHttpStatus().First().Key.ToString();
        }

        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            isLoading = true;

            try
            {
                if (Content.Id.HasValue)
                {
                    await WebApiClient.Api.RedirectRules[Content.Id.Value].PutAsync(Mapper.Map<Bammemo.Web.Client.WebApis.Client.Models.UpdateRedirectRuleRequest>(Content));
                }
                else
                {
                    await WebApiClient.Api.RedirectRules.PostAsync(Mapper.Map<Bammemo.Web.Client.WebApis.Client.Models.CreateRedirectRuleRequest>(Content));
                }

                await Dialog.CloseAsync(Content);
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"操作失败：{ex.Message}");
                Console.WriteLine($"Redirect rule 操作失败：{ex}");
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    public record RedirectRuleModel
    {
        public int? Id { get; set; }

        [Required]
        public string? Source { get; set; }

        [Required]
        [CustomValidation(typeof(RedirectRuleModelValidator), nameof(RedirectRuleModelValidator.SourceTargetNotSame))]
        public string? Target { get; set; }

        [Required]
        [CustomValidation(typeof(RedirectRuleModelValidator), nameof(RedirectRuleModelValidator.ValidHttpStatus))]
        public string? HttpStatus { get; set; }
    }

    public class RedirectRuleModelValidator
    {
        public static ValidationResult SourceTargetNotSame(string? value, ValidationContext context)
        {
            var model = context.ObjectInstance as RedirectRuleModel;
            return (model.Source != model.Target) ? ValidationResult.Success : new ValidationResult("Source 与 Target 不能相同");
        }

        public static ValidationResult ValidHttpStatus(string? value)
        {
            return RedirectRuleHelper.GetValidHttpStatus().Select(i => i.Key.ToString()).Contains(value) ? ValidationResult.Success : new ValidationResult("不支持的 HTTP 状态码");
        }
    }
}
