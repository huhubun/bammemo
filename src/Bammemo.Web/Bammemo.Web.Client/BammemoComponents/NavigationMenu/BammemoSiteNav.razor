@using Bammemo.Service.Abstractions.CommonServices
@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens
@rendermode InteractiveAuto
@implements IDisposable
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject GlobalState GlobalState
@inject NeutralFillLayerRest NeutralFillLayerRest
@inject DisabledOpacity DisabledOpacity
@inject PersistentComponentState PersistentComponentState
@inject ICommonSettingService CommonSettingService

<div class="site-nav">
    <div class="bammemo-site-nav-desktop">
        <a href="/" class="bammemo-site-nav-site-logo-wrap">
            <img src="@siteLogoUrl" class="bammemo-site-nav-site-logo" />
        </a>
        <BammemoNavMenu Type="BammenoNavMenuType.AppBar" />
    </div>

    <nav class="bammemo-site-nav-mobile">
        <FluentStack Orientation="Orientation.Horizontal" Style="align-items: center;">
            <FluentButton BackgroundColor="var(--neutral-layer-2)"
                          Color="var(--accent-foreground-rest)"
                          OnClick="@OpenPanelRightAsync"
                          IconStart="new Icons.Regular.Size24.Navigation()" />

            <FluentAnchor Href="/"
                          Class="bammemo-site-nav-mobile-title"
                          Appearance="Appearance.Hypertext">
                <BammemoSettingValue SettingKey="@SettingKeys.SiteName" EntryPoint="@(nameof(BammemoSiteNav))" />
            </FluentAnchor>

            @*             <FluentSpacer />

            <FluentButton BackgroundColor="var(--neutral-layer-2)"
                          Color="var(--accent-foreground-rest)"
                          OnClick="@OpenPanelRightAsync"
                          IconStart="new Icons.Regular.Size24.PanelRight()" /> *@ 
        </FluentStack>
    </nav>

    <FluentDialogProvider />
</div>

@code {
    private const string PERSITING_KEY = "site_nav_logo";

    private PersistingComponentStateSubscription persistingSubscription;
    private string? siteLogoUrl;
    private IDialogReference? _dialog;

    public void Dispose() => persistingSubscription.Dispose();

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (!PersistentComponentState.TryTakeFromJson(PERSITING_KEY, out siteLogoUrl))
        {
            var setting = (await CommonSettingService.GetByKeyAsync(SettingKeys.SiteLogoUrl))?.Value;
            siteLogoUrl = setting ?? "/bammemo-favicon-128x128.png";
        }
    }

    private async Task OpenPanelRightAsync()
    {
        _dialog = await DialogService.ShowPanelAsync<BammemoNavPanel>(new DialogParameters
            {
                Alignment = HorizontalAlignment.Left,
                ShowTitle = false,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                DialogType = DialogType.Panel
            });
        DialogResult result = await _dialog.Result;
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(PERSITING_KEY, siteLogoUrl);
        return Task.CompletedTask;
    }
}
