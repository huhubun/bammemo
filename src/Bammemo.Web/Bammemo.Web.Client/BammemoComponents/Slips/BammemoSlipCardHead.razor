@using Bammemo.Service.Abstractions.Dtos.Slips
@using Bammemo.Service.Abstractions.Enums
@rendermode InteractiveAuto
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject Bammemo.Web.Client.WebApis.Client.WebApiClient WebApiClient

<div class="bammemo-slip-card-head-wrap">
    <FluentStack Orientation="Orientation.Horizontal" Class="bammemo-slip-card-head" Style="align-items: center;">
        <BammemoSlipCardTitle Data="Data" />

        <div class="bammemo-slip-card-head-action">
            @if (Icon != null)
            {
                <FluentIcon Value="Icon" />
            }

            <FluentButton Id="@("slip-card-action-button-" + Data.Id)"
                          Class="bammemo-slip-card-head-more-button"
                          IconEnd="@(new Icons.Regular.Size20.MoreVertical())"
                          Title="更多操作"
                          Appearance="Appearance.Stealth"
                          OnClick="@(() => isMoreOperationMenuOpen = !isMoreOperationMenuOpen)" />

            <FluentMenu UseMenuService="false"
                        Anchor="@("slip-card-action-button-" + Data.Id)"
                        @bind-Open="isMoreOperationMenuOpen"
                        VerticalThreshold="170">
                @if (isLoggedIn)
                {
                    <FluentMenuItem OnClick="@(async _ => await OnEditClick.InvokeAsync())" Disabled="@(!IsWebAssembly)">修改</FluentMenuItem>
                    @* TODO *@
                    @* <FluentMenuItem>归档</FluentMenuItem> *@
                    <FluentDivider />
                    <FluentMenuItem OnClick="CopySlipUrlAsync">复制链接</FluentMenuItem>
                    @* <FluentMenuItem>高级</FluentMenuItem> *@
                    <FluentDivider />
                    <FluentMenuItem OnClick="HandleDeleteClick" Class="bammemo-slip-card-head-delete-button">删除</FluentMenuItem>
                }
                else
                {
                    <FluentMenuItem OnClick="CopySlipUrlAsync">复制链接</FluentMenuItem>
                }
            </FluentMenu>
        </div>
    </FluentStack>
</div>

@code {
    bool isMoreOperationMenuOpen = false;
    private bool isLoggedIn = false;

    [Parameter]
    public required ListSlipDto Data { get; set; }

    [Parameter]
    public required EventCallback OnEditClick { get; set; }

    [Parameter]
    public required EventCallback OnAfterDelete { get; set; }

    private bool IsWebAssembly => RendererInfo.Name == BlazorRendererName.WebAssembly;

    private Icon? Icon => Data.Status switch
    {
        SlipStatus.Private => new Icons.Regular.Size16.LockClosed(),
        SlipStatus.Archive => new Icons.Regular.Size16.Archive(),
        SlipStatus.Draft => new Icons.Regular.Size16.Drafts(),
        _ => null
    };

    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated ?? false;
    }

    private async Task CopySlipUrlAsync()
    {
        try
        {
            var slipUrl = NavigationManager.ToAbsoluteUri(Data.GetUrl());

            await JSRuntime.InvokeAsync<bool>("bammemo.util.copyTextToClipboard", slipUrl);

            ToastService.ShowSuccess($"已复制 {slipUrl}");
        }
        catch (JSException ex)
        {
            ToastService.ShowError($"复制失败：{ex.Message}");
        }
    }

    private async Task HandleDeleteClick()
    {
        var overviewContent = Data.Title != null ? Data.Title : Data.Content;
        var isOverviewLengthOverflow = overviewContent.Length > 50;
        var overview = Data.Content.Substring(0, isOverviewLengthOverflow ? 50 : overviewContent.Length);

        var dialog = await DialogService.ShowConfirmationAsync($"即将删除文章 \"{overview}{(isOverviewLengthOverflow ? "..." : null)}\" 且无法找回，确定要删除吗？", "删除", "取消", "确认删除");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await WebApiClient.Api.Slips[Data.Id].DeleteAsync();
            await OnAfterDelete.InvokeAsync();
        }
    }
}
