@using System.Globalization
@rendermode InteractiveAuto
@implements IDisposable
@inject PersistentComponentState PersistentComponentState
@inject ICommonAnalyticsService CommonAnalyticsService

<div class="bammemo-slip-calendar">
    <FluentCalendar Value="SelectedTime"
                    PickerMonthChanged="OnMonthChangedAsync"
                    ValueChanged="OnSelectedDateChangedAsync">
        <DaysTemplate>
            @if (!context.IsInactive)
            {
                var dayTicks = context.Date.Ticks;
                var dayEndTicks = context.Date.AddDays(1).Ticks;

                if ((publishedTimes ?? Enumerable.Empty<long>()).Any(t => t >= dayTicks && t < dayEndTicks))
                {
                    <div class="bammemo-slip-calendar-day-published">
                        @context.DayNumber
                    </div>
                }
                else
                {
                    @context.DayNumber
                }
            }
            else
            {
                @context.DayNumber
            }
        </DaysTemplate>
    </FluentCalendar>
</div>

@code {
    private PersistingComponentStateSubscription persistingSubscription;
    private long[]? publishedTimes;

    [Parameter]
    public DateTime? SelectedTime { get; set; }

    [Parameter]
    public EventCallback<DateTime?> OnSelectedDateChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        var now = DateTime.Now;
        var startTime = new DateTime(now.Year, now.Month, 1);

        await OnMonthChangedAsync(startTime);
    }

    private async Task OnMonthChangedAsync(DateTime dateTime)
    {
        if (!PersistentComponentState.TryTakeFromJson(nameof(publishedTimes), out publishedTimes))
        {
            publishedTimes = (await CommonAnalyticsService.GetSlipTimesAsync(
                TimeZoneInfo.ConvertTimeToUtc(dateTime).Ticks,
                TimeZoneInfo.ConvertTimeToUtc(dateTime.AddMonths(1)).Ticks
            ))?.CreatedTimes.Select(t => new DateTime(t).ToLocalTime().Ticks).ToArray() ?? [];
        }
    }

    private async Task OnSelectedDateChangedAsync(DateTime? dateTimes)
    {
        SelectedTime = dateTimes;
        await OnSelectedDateChanged.InvokeAsync(dateTimes);
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(nameof(publishedTimes), publishedTimes);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
}
