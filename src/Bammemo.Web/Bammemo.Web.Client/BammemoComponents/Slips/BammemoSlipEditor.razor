@using Bammemo.Service.Abstractions.Enums
@using Bammemo.Service.Abstractions.WebApiModels.Slips
@using Bammemo.Web.Client.Services
@rendermode InteractiveAuto
@inject WebApiClient webApiClient
@inject IMapper mapper
@inject IJSRuntime jsRuntime

@if (RendererInfo.Name != BlazorRendererName.WebAssembly)
{
    <BammemoCard>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" HorizontalGap="@(16*2)" VerticalAlignment="VerticalAlignment.Center">
            <FluentProgressRing />
            编辑器将在 Blazor WebAssembly 加载后可用，若长时间未载入请刷新页面
        </FluentStack>
    </BammemoCard>
}
else
{
    <div style="width: 100%">
        <FluentStack Orientation="Orientation.Vertical">
            <textarea style="width: 100%; height: auto; resize: none; overflow: hidden;"
                      class="slip-editor-input"
                      placeholder="开始记录…"
                      @bind="content"
                      @bind:event="oninput"
                      @ref="textarea" />

                      @* TODO *@
@*             <FluentToolbar Class="bammemo-slip-editor-toolbar">
                <FluentButton Appearance="Appearance.Stealth"
                              IconEnd="@(new Icons.Filled.Size20.NumberSymbol())"
                              Title="标签" />
                <FluentButton Appearance="Appearance.Stealth"
                              IconEnd="@(new Icons.Filled.Size20.Attach())"
                              Title="上传" />
                <FluentButton Appearance="Appearance.Stealth"
                              IconEnd="@(new Icons.Filled.Size20.LinkMultiple())"
                              Title="链接" />
            </FluentToolbar> *@

            <FluentDivider Style="width: 100%;" />

            <FluentStack Orientation="Orientation.Horizontal" Class="bammemo-slip-editor-actions">
                <FluentSelect @bind-Value="status"
                              TOption="SlipStatus"
                              Items="Enum.GetValues<SlipStatus>()"
                              OptionText="@(s => s.ToString())"
                              OptionValue="@(s => ((int)s).ToString())" />

                <FluentStack Orientation="Orientation.Horizontal" Style="justify-content: right;">
                    @if (IsEdit)
                    {
                        <FluentButton Appearance="Appearance.Outline"
                                      OnClick="@(_ => OnEditCanceled.InvokeAsync(true))"
                                      Loading="isSaveButtonLoading">
                            Cancel
                        </FluentButton>
                    }

                    <FluentButton Appearance="Appearance.Accent"
                                  OnClick="OnSaveClickAsync"
                                  Disabled="content == null || content.Length == 0"
                                  Loading="isSaveButtonLoading"
                                  IconEnd="new Icons.Regular.Size20.Send()">
                        Save
                    </FluentButton>
                </FluentStack>
            </FluentStack>
        </FluentStack>
    </div>
}

@code {
    private string? content = null;
    private string status = ((int)SlipStatus.Public).ToString();
    private bool isSaveButtonLoading = false;
    private ElementReference textarea;

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public ListSlipDto? Data { get; set; }

    [Parameter]
    public EventCallback<ListSlipDto> OnSlipSaved { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditCanceled { get; set; }

    protected override void OnParametersSet()
    {
        if (Data != null)
        {
            content = Data.Content;
            status = ((int)Data.Status).ToString();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Data != null)
        {
            await jsRuntime.InvokeVoidAsync("bammemo.util.resizeSlipEditorTextarea", textarea);
        }
    }

    private async Task OnSaveClickAsync()
    {
        ArgumentNullException.ThrowIfNull(content);

        if (IsEdit)
        {
            ArgumentNullException.ThrowIfNull(Data);

            var editedStatus = Enum.Parse<SlipStatus>(status);

            var updatedSlip = await webApiClient.Slips.UpdateAsync(Data.Id, new UpdateSlipRequest
                {
                    Content = content,
                    Status = editedStatus
                });

            await OnSlipSaved.InvokeAsync(mapper.Map<ListSlipDto>(updatedSlip));
        }
        else
        {
            var createdSlip = await webApiClient.Slips.CreateAsync(new CreateSlipRequest
                {
                    Content = content,
                    Status = Enum.Parse<SlipStatus>(status)
                });

            await OnSlipSaved.InvokeAsync(mapper.Map<ListSlipDto>(createdSlip));
        }

        content = null;
    }
}
