@using Bammemo.Service.Abstractions.Enums
@using Bammemo.Service.Abstractions.WebApiModels.Slips
@using Bammemo.Web.Client.Services
@rendermode InteractiveWebAssembly
@inject WebApiClient webApiClient
@inject IMapper mapper
@inject IJSRuntime jsRuntime

<div style="width: 100%">
    <FluentStack Orientation="Orientation.Vertical">
        <textarea style="width: 100%; height: auto; resize: none; overflow: hidden;"
                  class="slip-editor-input"
                  @bind="content"
                  @bind:event="oninput"
                  @ref="textarea" />

        <FluentToolbar Style="width: 100%;">
            <FluentButton Appearance="Appearance.Stealth"
                          IconEnd="@(new Icons.Regular.Size16.NumberSymbol())"
                          Title="标签" />
            <FluentButton Appearance="Appearance.Stealth"
                          IconEnd="@(new Icons.Regular.Size16.Attach())"
                          Title="上传" />
            <FluentButton Appearance="Appearance.Stealth"
                          IconEnd="@(new Icons.Regular.Size16.LinkMultiple())"
                          Title="链接" />
        </FluentToolbar>

        <FluentDivider Style="width: 100%;" />

        <FluentToolbar Style="width: 100%;">
            <FluentSelect @bind-Value="status"
                          TOption="SlipStatus"
                          Items="Enum.GetValues<SlipStatus>()"
                          OptionText="@(s => s.ToString())"
                          OptionValue="@(s => ((int)s).ToString())" />

            @if (IsEdit)
            {
                <FluentSpacer />

                <FluentButton Appearance="Appearance.Accent"
                              OnClick="@(_ => OnEditCanceled.InvokeAsync(true))"
                              Loading="isSaveButtonLoading">Cancel</FluentButton>
            }

            <FluentSpacer />

            <FluentButton Appearance="Appearance.Accent"
                          OnClick="OnSaveClickAsync"
                          Disabled="content == null || content.Length == 0"
                          Loading="isSaveButtonLoading">Save</FluentButton>
        </FluentToolbar>
    </FluentStack>
</div>

@code {
    private string? content = null;
    private string status = ((int)SlipStatus.Public).ToString();
    private bool isSaveButtonLoading = false;
    private ElementReference textarea;

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public ListSlipDto? Data { get; set; }

    [Parameter]
    public EventCallback<ListSlipDto> OnSlipSaved { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditCanceled { get; set; }

    protected override void OnParametersSet()
    {
        if (Data != null)
        {
            content = Data.Content;
            status = ((int)Data.Status).ToString();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Data != null)
        {
            await jsRuntime.InvokeVoidAsync("resizeSlipEditorTextarea", textarea);
        }
    }

    private async Task OnSaveClickAsync()
    {
        ArgumentNullException.ThrowIfNull(content);

        if (IsEdit)
        {
            ArgumentNullException.ThrowIfNull(Data);

            var editedStatus = Enum.Parse<SlipStatus>(status);

            var updatedSlip = await webApiClient.Slips.UpdateAsync(Data.Id, new UpdateSlipRequest
                {
                    Content = content,
                    Status = editedStatus
                });

            await OnSlipSaved.InvokeAsync(mapper.Map<ListSlipDto>(updatedSlip));
        }
        else
        {
            var createdSlip = await webApiClient.Slips.CreateAsync(new CreateSlipRequest
                {
                    Content = content,
                    Status = Enum.Parse<SlipStatus>(status)
                });

            await OnSlipSaved.InvokeAsync(mapper.Map<ListSlipDto>(createdSlip));
        }

        content = null;
    }
}
