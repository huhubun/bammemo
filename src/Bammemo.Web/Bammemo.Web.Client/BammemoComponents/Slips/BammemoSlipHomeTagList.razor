@using Bammemo.Service.Abstractions.CommonServices
@rendermode InteractiveAuto
@implements IDisposable
@inject PersistentComponentState PersistentComponentState
@inject ICommonAnalyticsService CommonAnalyticsService

<div class="bammemo-slip-tag-list">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="@(16/2)" VerticalGap="@(16/4)" Wrap>
        @foreach (var tag in popularTags ?? Enumerable.Empty<string>())
        {
            <FluentButton BackgroundColor="var(--neutral-layer-2)"
                          Color="var(--accent-foreground-active)"
                          OnClick="@(_ => OnTagSelectedAsync(tag))"
                          IconStart="@(new Icons.Regular.Size16.NumberSymbol())">
                @tag
            </FluentButton>
        }
    </FluentStack>
</div>

@code {
    private PersistingComponentStateSubscription persistingSubscription;
    private string[]? popularTags;

    [Parameter]
    public string[]? SelectedTags { get; set; }

    [Parameter]
    public EventCallback<string[]?> OnSelectedTagChanged { get; set; }

    protected async override Task OnInitializedAsync()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (!PersistentComponentState.TryTakeFromJson(nameof(popularTags), out popularTags))
        {
            popularTags = (await CommonAnalyticsService.GetSlipTagsAsync()).Tags;
        }
    }

    private async Task OnTagSelectedAsync(string tag)
    {
        var selectedTags = new List<string>(SelectedTags ?? Enumerable.Empty<string>());

        if (selectedTags.Contains(tag))
        {
            selectedTags.Remove(tag);
        }
        else
        {
            selectedTags.Add(tag);
        }

        await OnSelectedTagChanged.InvokeAsync(selectedTags.ToArray());
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(nameof(popularTags), popularTags);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
}
