@using Bammemo.Service.Abstractions.SettingModels
@using System.Text.Json
@using System.Reflection
@using System.Collections.ObjectModel
@using System.Text.RegularExpressions
@rendermode InteractiveAuto
@implements IDisposable
@inject PersistentComponentState PersistentComponentState
@inject IMapper Mapper
@inject ICommonSettingService CommonSettingService
@inject NavigationManager NavigationManager

<footer class="bammemo-footer">
    <FluentGrid Justify="JustifyContent.Center">
        <FluentGridItem xs="@GridItemDisplayType.Left.Xs" lg="@GridItemDisplayType.Left.Lg" xl="@GridItemDisplayType.Left.Xl">
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="@(16/4)">
                <FluentStack Orientation="Orientation.Horizontal"
                HorizontalAlignment="HorizontalAlignment.Center"
                HorizontalGap="10"
                Class="bammemo-footer-environment-info-wrap"
                Style="align-items: center;">
                    <div>
                        @DotNetVersion
                    </div>
                    <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

                    <div>
                        @RenderMode
                    </div>
                    <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

                    <div>
                        <FluentAnchor Href="https://github.com/huhubun/bammemo" Appearance="Appearance.Hypertext" Target="_blank" Class="bammemo-font-text">
                            Bammemo
                            <BammemoPackageVersion />
                        </FluentAnchor>
                    </div>
                </FluentStack>

                @if (filingNumberLinks != null)
                {
                    <FluentStack Orientation="Orientation.Horizontal"
                    HorizontalAlignment="HorizontalAlignment.Center"
                    HorizontalGap="10"
                    Class="bammemo-footer-filing-number-links-wrap"
                    Style="align-items: center;">
                        @foreach (var link in filingNumberLinks)
                        {
                            <div>
                                <FluentAnchor Href="@link.Url" Appearance="Appearance.Hypertext" Target="_blank">@link.Text</FluentAnchor>
                            </div>

                            @if (link != filingNumberLinks.Last())
                            {
                                <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>
                            }
                        }
                    </FluentStack>
                }
            </FluentStack>
        </FluentGridItem>

        @if (GridItemDisplayType.Right != null)
        {
            <FluentGridItem lg="@GridItemDisplayType.Right.Lg" HiddenWhen="GridItemHidden.MdAndDown" />
        }
    </FluentGrid>
</footer>

@code {
    private static readonly FooterGridItemDisplayType oneColumn = new()
        {
            Left = new(12)
        };
    private static readonly FooterGridItemDisplayType twoColumns = new()
        {
            Left = new(12, 8, 6),
            Right = new(null, 3, null)
        };
    private static readonly ReadOnlyCollection<string> oneColumnPagePatterns = new([
            "^/login$",
            "^/about$",
            "^/links$"
    ]);
    private PersistingComponentStateSubscription persistingSubscription;
    private List<TextUrlSetting>? filingNumberLinks;

    private string DotNetVersion => System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription;
    private string RenderMode => "Blazor " + (OperatingSystem.IsBrowser() ? "WebAssembly" : "Server");
    private string CurrentPageAbsolutePath => new Uri(NavigationManager.Uri).AbsolutePath;
    private FooterGridItemDisplayType GridItemDisplayType => oneColumnPagePatterns.Any(p => Regex.IsMatch(CurrentPageAbsolutePath, p)) ? oneColumn : twoColumns;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (!PersistentComponentState.TryTakeFromJson(nameof(filingNumberLinks), out filingNumberLinks))
        {
            var setting = await CommonSettingService.GetByKeyAsync(SettingKeys.FilingNumberLinks);
            filingNumberLinks = setting?.Value != null ? JsonSerializer.Deserialize<List<TextUrlSetting>>(setting.Value) : [];
        }
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(nameof(filingNumberLinks), filingNumberLinks);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();

    record FooterGridItemDisplayType
    {
        public required FooterGridItemSpan Left { get; init; }
        public FooterGridItemSpan? Right { get; init; }
    }

    record FooterGridItemSpan
    {
        public FooterGridItemSpan(int? xs)
        {
            Xs = xs;
        }

        public FooterGridItemSpan(int? xs, int? lg, int? xl)
        {
            Xs = xs;
            Lg = lg;
            Xl = xl;
        }

        public int? Xs { get; init; }
        public int? Lg { get; init; }
        public int? Xl { get; init; }
    }
}
