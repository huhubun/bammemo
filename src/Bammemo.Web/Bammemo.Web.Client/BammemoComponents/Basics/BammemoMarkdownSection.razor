@using Bammemo.Web.Client.Extensions.MarkdigExtensions
@using Bammemo.Web.Client.Extensions.MarkdigExtensions.MoreSeparator
@using Markdig
@using System.Text
@rendermode InteractiveAuto
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (markdownHtml != null)
{
    <div class="bammemo-markdown-section-wrap">
        <div class="bammemo-markdown-section-content">
            @(new MarkupString(markdownHtml))
        </div>

        @if (hasMore && ReadAllUrl != null)
        {
            <FluentAnchor IconStart="@(new Icons.Regular.Size16.ReadingList())" Href="@ReadAllUrl">阅读全文</FluentAnchor>
        }
    </div>
}

@code {
    [Parameter]
    public required string Content { get; set; }

    [Parameter]
    public required bool FullDisplay { get; set; }

    [Parameter]
    public string? ReadAllUrl { get; set; }

    private string? markdownHtml = null;
    private bool hasMore = false;

    protected override void OnInitialized()
    {
        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseAutoIdentifiers()
            .UseEmojiAndSmiley()
            .Use<MarkdownSectionPreCodeExtension>()
            .Use<MoreSeparatorExtension>()
            .Build();


        if (FullDisplay)
        {
            markdownHtml = Markdown.ToHtml(Content, pipeline);
        }
        else
        {
            (markdownHtml, hasMore) = ParseContent(Content, pipeline);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("bammemo.highlight.highlight");
            await JSRuntime.InvokeVoidAsync("bammemo.highlight.addCopyButton");
        }
    }

    public (string summary, bool hasMore) ParseContent(string markdown, MarkdownPipeline pipeline)
    {
        var document = Markdown.Parse(markdown, pipeline);
        var summary = new StringBuilder();
        bool hasMore = false;

        foreach (var block in document)
        {
            if (block is MoreSeparatorBlock)
            {
                hasMore = true;
                break;
            }

            var renderer = new Markdig.Renderers.HtmlRenderer(new StringWriter(summary));
            pipeline.Setup(renderer);
            renderer.Write(block);
        }

        return (summary.ToString(), hasMore);
    }

}
