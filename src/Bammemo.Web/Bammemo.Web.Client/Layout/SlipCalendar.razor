@using Bammemo.Service.Abstractions.WebApiModels.Slips
@rendermode InteractiveAuto
@inject WebApiClient webApiClient

<FluentCalendar Value="SelectedTime" Style="height: 250px;" PickerMonthChanged="OnMonthChangedAsync" ValueChanged="OnSelectedDateChangedAsync">
    <DaysTemplate>
        @if (!context.IsInactive)
        {
            var dayTicks = context.Date.Ticks;
            var dayEndTicks = context.Date.AddDays(1).Ticks;

            if (times.Any(t => t >= dayTicks && t < dayEndTicks))
            {

                <div style="color: red; font-weight: bold;">
                    @context.DayNumber
                </div>
            }
            else
            {
                @context.DayNumber
            }
        }
        else
        {
            @context.DayNumber
        }
    </DaysTemplate>
</FluentCalendar>

@code {
    private long[] times = [];

    [Parameter]
    public DateTime? SelectedTime { get; set; }

    [Parameter]
    public EventCallback<DateTime?> OnSelectedDateChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var now = DateTime.Now;
        var startTime = new DateTime(now.Year, now.Month, 1);

        await OnMonthChangedAsync(startTime);
    }

    private async Task OnMonthChangedAsync(DateTime dateTime)
    {
        times = (await webApiClient.Analytics.GetSlipTimesAsync(new GetSlipTimesRequest
            {
                StartTime = TimeZoneInfo.ConvertTimeToUtc(dateTime).Ticks,
                EndTime = TimeZoneInfo.ConvertTimeToUtc(dateTime.AddMonths(1)).Ticks
            }))?.CreatedTimes.Select(t => new DateTime(t).ToLocalTime().Ticks).ToArray() ?? [];
    }

    private async Task OnSelectedDateChangedAsync(DateTime? dateTimes)
    {
        SelectedTime = dateTimes;
        await OnSelectedDateChanged.InvokeAsync(dateTimes);
    }
}
