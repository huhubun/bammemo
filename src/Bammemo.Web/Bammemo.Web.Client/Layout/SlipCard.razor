@rendermode InteractiveAuto

<div style="width: 100%">
    @if (isEditMode)
    {
        <SlipEditor IsEdit="true" Data="Data" OnSlipSaved="OnNewSlipSaved" OnEditCanceled="@(_ => isEditMode = false)" />
    }
    else
    {
        <div>
            <FluentToolbar style="width:100%">
                <div>
                    <snap title="@(DisplayTimeTitle == DisplayTime ? null : DisplayTimeTitle)">@DisplayTime</snap>

                    @if (Data.Status == Service.Abstractions.Enums.SlipStatus.Private)
                    {
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.LockClosed())" />
                    }
                </div>

                <FluentSpacer />

                <div>
                    <FluentButton Id="@("slip-card-action-button-" + Data.Id)"
                                  IconEnd="@(new Icons.Regular.Size16.MoreVertical())"
                                  Title="更多操作"
                                  Appearance="Appearance.Stealth"
                                  OnClick="@(() => isMoreOperationMenuOpen = !isMoreOperationMenuOpen)" />

                    <FluentMenu UseMenuService="false"
                                Anchor="@("slip-card-action-button-" + Data.Id)"
                                @bind-Open="isMoreOperationMenuOpen"
                                VerticalThreshold="170">
                        <FluentMenuItem OnClick="@(_ => isEditMode = true)">修改</FluentMenuItem>
                        <FluentMenuItem>归档</FluentMenuItem>
                        <FluentDivider />
                        <FluentMenuItem>复制链接</FluentMenuItem>
                        <FluentMenuItem>可读性链接</FluentMenuItem>
                        <FluentDivider />
                        <FluentMenuItem>删除</FluentMenuItem>
                    </FluentMenu>
                </div>
            </FluentToolbar>

            @* <MarkdownSection Content="@Data.Content" style="width:100%;" /> *@
            <BammemoMarkdown Content="@Data.Content" />
        </div>
    }
</div>

@code {
    bool isMoreOperationMenuOpen = false;
    private bool isEditMode = false;

    [Parameter]
    public required ListSlipDto Data { get; set; }

    private string DisplayTime
    {
        get
        {
            var timeSpan = new TimeSpan(DateTime.UtcNow.Ticks - Data.CreatedAt);
            if (timeSpan.TotalDays > 5)
            {
                return DisplayTimeTitle;
            }
            else
            {
                return timeSpan.ToTimeAgo();
            }
        }
    }

    private string DisplayTimeTitle
    {
        get
        {
            return new DateTime(Data.CreatedAt, DateTimeKind.Utc).ToLocalTime().ToString();
        }
    }

    private void OnNewSlipSaved(ListSlipDto slip)
    {
        Data = slip;
        isEditMode = false;
    }
}
