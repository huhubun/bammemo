@using Bammemo.Service.Abstractions.Paginations
@using Bammemo.Service.Abstractions.WebApiModels.Slips
@rendermode InteractiveAuto
@inject NavigationManager navigationManager
@inject ICommonSlipService commonSlipService
@inject WebApiClient webApiClient

<FluentGrid Justify="JustifyContent.Center">
    <FluentGridItem xs="12" lg="8" xl="6">
        <FluentStack Orientation="Orientation.Vertical">

            @if (IsAdminPage)
            {
                <Bammemo.Web.Client.Layout.SlipEditor OnSlipSaved="OnNewSlipSaved" />
            }

            <div>
                @if (StartTimeDateTime.HasValue)
                {
                    <FluentBadge Appearance="Appearance.Neutral" OnDismissClick="OnRemoveCalendarSelectedDate">
                        @StartTimeDateTime.ToIsoDateString()
                    </FluentBadge>
                }

                @foreach (var tag in SelectedTags ?? [])
                {
                    <span>@tag</span>
                }
            </div>

            @foreach (var s in newSlipList)
            {
                <Bammemo.Web.Client.Layout.SlipCard Data="s" @key="s.Id" />
            }

            @foreach (var s in slipList)
            {
                <Bammemo.Web.Client.Layout.SlipCard Data="s" @key="s.Id" />
            }

            @if (cursorSlipId != null)
            {
                <div>
                    <FluentButton OnClick="LoadMore">Load more</FluentButton>
                </div>
            }

        </FluentStack>
    </FluentGridItem>

    <FluentGridItem lg="3" HiddenWhen="GridItemHidden.MdAndDown">
        <Bammemo.Web.Client.Layout.SlipCalendar SelectedTime="StartTimeDateTime"
                                                OnSelectedDateChanged="OnCalendarSelectedDateChanged" />
        <Bammemo.Web.Client.Layout.SlipTagList SelectedTags="SelectedTags" OnSelectedTagChanged="OnSelectedTagChanged" />
    </FluentGridItem>
</FluentGrid>

@code {
    [Parameter]
    public bool IsAdminPage { get; set; }

    [SupplyParameterFromQuery]
    private long? StartTime { get; set; }

    private DateTime? StartTimeDateTime => StartTime.HasValue ? new DateTime(StartTime.Value).ToLocalTime() : null;

    [SupplyParameterFromQuery]
    private long? EndTime { get; set; }

    [SupplyParameterFromQuery(Name = "tags")]
    private string[]? SelectedTags { get; set; }

    private List<ListSlipDto> slipList = new List<ListSlipDto>();
    private List<ListSlipDto> newSlipList = new List<ListSlipDto>();
    private string? cursorSlipId = null;

    protected async override Task OnParametersSetAsync()
    {
        var slips = await commonSlipService.ListAsync(GetListSlipQueryRequest());
        AppendRenderSlips(slips, isNewRender: true);
    }

    private void AppendRenderSlips(ListSlipDto[] slips, bool isNewRender = false)
    {
        if (isNewRender)
        {
            slipList = [];
            newSlipList = [];
        }

        if (slips.Length > 0)
        {
            slipList.AddRange(slips);
            cursorSlipId = slips.Last().Id;
        }
    }

    private async Task LoadMore()
    {
        var slips = await commonSlipService.ListAsync(GetListSlipQueryRequest(), new CursorPagingRequest<string>
            {
                Cursor = cursorSlipId,
                Take = 5
            });

        AppendRenderSlips(slips);
    }

    private void OnNewSlipSaved(ListSlipDto slip)
    {
        if (newSlipList.Count == 0 && slipList.Count == 0)
        {
            cursorSlipId = slip.Id;
        }

        newSlipList.Insert(0, slip);
    }

    private void OnCalendarSelectedDateChanged(DateTime? dateTime)
    {
        navigationManager.NavigateTo(navigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>
        {
            { nameof(StartTime), dateTime.HasValue? TimeZoneInfo.ConvertTimeToUtc(dateTime.Value).Ticks : null },
            { nameof(EndTime), dateTime.HasValue? TimeZoneInfo.ConvertTimeToUtc(dateTime.Value.AddDays(1)).Ticks : null}
        }), false);
    }

    private void OnRemoveCalendarSelectedDate() => OnCalendarSelectedDateChanged(null);

    private void OnSelectedTagChanged(string[]? tags)
    {
        navigationManager.NavigateTo(navigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>
        {
            {"tags", tags}
        }), false);
    }

    private ListSlipQueryRequest GetListSlipQueryRequest()
    {
        return new ListSlipQueryRequest
            {
                StartTime = StartTime,
                EndTime = EndTime,
                Tags = SelectedTags
            };
    }
}