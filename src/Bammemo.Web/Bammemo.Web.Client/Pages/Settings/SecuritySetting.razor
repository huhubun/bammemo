@page "/settings/security"
@using System.Net
@using Bammemo.Service.Abstractions.Enums
@rendermode InteractiveWebAssembly
@attribute [Authorize]
@inject Bammemo.Web.Client.WebApis.Client.WebApiClient WebApiClient
@inject IMapper Mapper

<div>
    <BammemoSettingLayout PageTitle="安全">
        @if (model != null)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16" Class="w-full">
                <div class="w-full">
                    <FluentLabel Typo="Typography.Subject">密钥源</FluentLabel>
                    <FluentLabel Typo="Typography.Body">@model.KeySource</FluentLabel>
                </div>

                <div class="w-full">
                    <FluentLabel Typo="Typography.Subject">密钥设置</FluentLabel>

                    <FluentGrid Class="w-full">
                        <FluentGridItem xs="12" sm="6">
                            <FluentAnchor Href="/settings/security/tencent-cloud" Appearance="Appearance.Neutral" Style="width: 100%;">
                                Tencent Cloud
                            </FluentAnchor>
                        </FluentGridItem>
                    </FluentGrid>
                </div>
            </FluentStack>
        }
        else
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16" Class="w-full">
                @for (var i = 0; i < 2; i++)
                {
                    <FluentSkeleton Style="width: 6rem; height: 1.25rem;" />
                    <FluentSkeleton Style="width: 100%; height: 1.25rem;" />
                    <FluentSkeleton Style="width: 12rem; height: 1.25rem;" />
                }
            </FluentStack>

        }
    </BammemoSettingLayout>
</div>

<FluentToastProvider />

@code {
    private SecuritySettingModel? model;

    protected override async Task OnInitializedAsync()
    {
        if (RendererInfo.Name != BlazorRendererName.WebAssembly)
        {
            return;
        }

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var response = await WebApiClient.Api.Settings.Security.KeySource.GetAsync();

        model = new()
            {
                KeySource = (KeySource)response.KeySource.Value
            };
    }

    class SecuritySettingModel
    {
        public KeySource KeySource { get; set; }
    }
}
