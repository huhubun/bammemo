@page "/"
@using System.Text.Json
@using Bammemo.Service.Abstractions.CommonServices
@rendermode InteractiveAuto
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PersistentComponentState PersistentComponentState
@inject ICommonSettingService CommonSettingService

<BammemoPageTitle Title="首页" />

<HeadContent>
    @foreach (var meta in metas ?? Enumerable.Empty<KeyValuePair<string, string?>>())
    {
        <meta name="@meta.Key" content="@meta.Value" />
    }
</HeadContent>

<BammemoSlipHome IsAdmin="@isLoggedIn" />

@code {
    private const string HOME_HEAD_PERSITING_KEY = "home_head";
    private PersistingComponentStateSubscription persistingSubscription;
    private Dictionary<string, string?>? metas;
    private bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (!PersistentComponentState.TryTakeFromJson(HOME_HEAD_PERSITING_KEY, out metas))
        {
            var response = await CommonSettingService.GetByKeysAsync([SettingKeys.SiteDescription, SettingKeys.SiteKeywords]);

            metas = new();

            foreach (var setting in response.Settings)
            {
                switch (setting.Key)
                {
                    case SettingKeys.SiteDescription:
                        metas["description"] = setting.Value;
                        break;
                    case SettingKeys.SiteKeywords:
                        if (setting.Value != null)
                        {
                            var keywords = JsonSerializer.Deserialize<List<string>>(setting.Value);
                            if (keywords != null)
                            {
                                metas["keywords"] = String.Join(",", keywords);
                            }
                        }
                        break;
                    default:
                        throw new NotSupportedException(setting.Key);
                }
            }
        }

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = state.User.Identity?.IsAuthenticated ?? false;
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(HOME_HEAD_PERSITING_KEY, metas);
        return Task.CompletedTask;
    }
}
