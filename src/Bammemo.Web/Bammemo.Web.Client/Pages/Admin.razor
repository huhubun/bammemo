@page "/admin"
@using Bammemo.Service.Abstractions.Paginations
@using Bammemo.Service.Abstractions.WebApiModels.Slips
@rendermode InteractiveWebAssembly
@inject ICommonSlipService commonSlipService
@inject WebApiClient webApiClient

<PageTitle>Admin 123</PageTitle>

<FluentGrid Justify="JustifyContent.Center">
    <FluentGridItem xs="12" lg="8" xl="6">
        <FluentStack Orientation="Orientation.Vertical">

            <Bammemo.Web.Client.Layout.SlipEditor OnSlipSaved="OnNewSlipSaved" />

            <div>
                @if (selectedTime.HasValue)
                {
                    <FluentBadge Appearance="Appearance.Neutral" OnDismissClick="OnRemoveCalendarSelectedDateAsync">
                        @selectedTime.ToIsoDateString()
                    </FluentBadge>
                }
            </div>

            @foreach (var s in newSlipList.OrderByDescending(s => s.Id))
            {
                <Bammemo.Web.Client.Layout.SlipCard Data="s" @key="s.Id" />
            }

            @foreach (var s in slipList)
            {
                <Bammemo.Web.Client.Layout.SlipCard Data="s" @key="s.Id" />
            }

            @if (cursorSlipId != null)
            {
                <div>
                    <FluentButton OnClick="LoadMore">Load more</FluentButton>
                </div>
            }

        </FluentStack>
    </FluentGridItem>

    <FluentGridItem lg="3" HiddenWhen="GridItemHidden.MdAndDown">
        <Bammemo.Web.Client.Layout.SlipCalendar Times="slipTimes" SelectedTime="selectedTime" OnSelectedDateChanged="OnCalendarSelectedDateChangedAsync" />
    </FluentGridItem>
</FluentGrid>


@code {

    private List<ListSlipDto> slipList = new List<ListSlipDto>();
    private List<ListSlipDto> newSlipList = new List<ListSlipDto>();
    private string? cursorSlipId = null;
    private long[] slipTimes = [];
    private DateTime? selectedTime = null;

    protected override async Task OnInitializedAsync()
    {
        var slips = await commonSlipService.ListAsync(null);

        RenderSlips(slips);

        var now = DateTime.Now;
        var startTime = new DateTime(now.Year, now.Month, 1);
        var endTime = startTime.AddMonths(1);

        slipTimes = (await webApiClient.Slips.GetSlipTimesAsync(new GetSlipTimesRequest
            {
                StartTime = TimeZoneInfo.ConvertTimeToUtc(startTime).Ticks,
                EndTime = TimeZoneInfo.ConvertTimeToUtc(endTime).Ticks
            }))?.CreatedTimes ?? [];
    }

    private void RenderSlips(ListSlipDto[] slips)
    {
        if (slips.Length > 0)
        {
            slipList.AddRange(slips);
            cursorSlipId = slips.Last().Id;
        }
    }

    private async Task LoadMore()
    {
        var slips = await commonSlipService.ListAsync(GetListSlipQueryRequest(), new CursorPagingRequest<string>
            {
                Cursor = cursorSlipId,
                Take = 5
            });

        RenderSlips(slips);
    }

    private void OnNewSlipSaved(ListSlipDto slip)
    {
        if (newSlipList.Count == 0 && slipList.Count == 0)
        {
            cursorSlipId = slip.Id;
        }

        newSlipList.Add(slip);
    }

    private async Task OnCalendarSelectedDateChangedAsync(DateTime? dateTime)
    {
        selectedTime = dateTime;

        slipList = [];
        newSlipList = [];

        var slips = await commonSlipService.ListAsync(GetListSlipQueryRequest());
        RenderSlips(slips);
    }

    private async Task OnRemoveCalendarSelectedDateAsync() => await OnCalendarSelectedDateChangedAsync(null);

    private ListSlipQueryRequest GetListSlipQueryRequest()
    {
        var request = new ListSlipQueryRequest();

        if(selectedTime.HasValue)
        {
            request.StartTime = selectedTime.Value.Ticks;
            request.EndTime = selectedTime.Value.AddDays(1).Ticks;
        }

        return request;
    }
}