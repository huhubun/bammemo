@page "/about"
@using System.Text.Json
@using Bammemo.Service.Abstractions.CommonServices
@rendermode InteractiveAuto
@inject ICommonSettingService CommonSettingService
@inject PersistentComponentState PersistentComponentState

<BammemoPageTitle Title="关于" />

@if (settingModel != null)
{
    if (settingModel.Description != null)
    {
        <SectionContent SectionName="MetaDescription">
            <meta name="description" content="@settingModel.Description" />
        </SectionContent>
    }

    if (settingModel.Keywords != null)
    {
        <SectionContent SectionName="MetaKeywords">
            <meta name="keywords" content="@String.Join(",", settingModel.Keywords)" />
        </SectionContent>
    }
}

<div>
    <BammemoContent>
        @if (settingModel != null)
        {
            if (settingModel.Content != null)
            {
                <BammemoCard>
                    <BammemoMarkdownSection Id="@ABOUT_PAGE_PERSITING_KEY" Content="@settingModel.Content" />
                </BammemoCard>
            }
            else
            {
                <BammemoNoData />
            }
        }
        else
        {
            <BammemoCard>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentSkeleton Style="width: 100%; height: 1.25rem;" />
                    <FluentSkeleton Style="width: 100%; height: 1.25rem;" />
                    <FluentSkeleton Style="width: 20%; height: 1.25rem;" />
                </FluentStack>
            </BammemoCard>
        }
    </BammemoContent>
</div>

@code {
    private static readonly string[] settingKeys = [
            SettingKeys.AboutPageDescription,
            SettingKeys.AboutPageKeywords,
            SettingKeys.AboutPageContent
        ];
    private const string ABOUT_PAGE_PERSITING_KEY = "about_page";
    private PersistingComponentStateSubscription persistingSubscription;
    private AboutPageSettingModel? settingModel;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (!PersistentComponentState.TryTakeFromJson(ABOUT_PAGE_PERSITING_KEY, out settingModel))
        {
            var response = await CommonSettingService.GetByKeysAsync(settingKeys);

            settingModel = new();

            foreach (var setting in response.Settings)
            {
                switch (setting.Key)
                {
                    case SettingKeys.AboutPageDescription:
                        settingModel.Description = setting.Value;
                        break;
                    case SettingKeys.AboutPageKeywords:
                        if (setting.Value != null)
                        {
                            settingModel.Keywords = JsonSerializer.Deserialize<List<string>>(setting.Value, JsonSourceGenerationContext.Default.ListString);
                        }
                        break;
                    case SettingKeys.AboutPageContent:
                        settingModel.Content = setting.Value;
                        break;
                    default:
                        throw new NotSupportedException(setting.Key);
                }
            }
        }
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(ABOUT_PAGE_PERSITING_KEY, settingModel);
        return Task.CompletedTask;
    }
}
